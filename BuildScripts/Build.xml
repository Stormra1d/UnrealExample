<BuildGraph xmlns="http://www.epicgames.com/BuildGraph" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.epicgames.com/BuildGraph ../Schema.xsd">
  
  <!-- Configuration -->
  <Option Name="ProjectName" DefaultValue="" Description="Name of the project" />
  <Option Name="ProjectRoot" DefaultValue="" Description="Root directory of the project" />

  <Property Name="ProjectFile" Value="$(ProjectRoot)\$(ProjectName).uproject" />
  <Property Name="BuildOutputDir" Value="$(ProjectRoot)\Saved\StagedBuilds" />
  <Property Name="AutomationOutDir" Value="$(ProjectRoot)\Saved\Automation" />

  <Error Message="Project file $(ProjectFile) does not exist" If="!Exists('$(ProjectFile)')" />
  <Error Message="ProjectName must be specified via -set:ProjectName=..." If="'$(ProjectName)' == ''" />
  <Error Message="ProjectRoot must be specified via -set:ProjectRoot=..." If="'$(ProjectRoot)' == ''" />

  <!-- Build Configuration -->
  <Option Name="BuildConfiguration" DefaultValue="Development" Restrict="Debug|Development|Shipping|Test" Description="Build configuration" />
  <Option Name="TargetPlatform" DefaultValue="Win64" Restrict="Win64|Linux|Mac" Description="Target platform for builds" />
  
  <Option Name="EnableEditor" DefaultValue="true" Restrict="true|false" Description="Build the editor" />
  <Option Name="EnableGameBuild" DefaultValue="true" Restrict="true|false" Description="Build the game target" />
  <Option Name="EnableCook" DefaultValue="true" Restrict="true|false" Description="Cook content for the target platform" />
  <Option Name="EnablePackage" DefaultValue="true" Restrict="true|false" Description="Package the game" />
  <Option Name="EnableTests" DefaultValue="true" Restrict="true|false" Description="Run automated tests" />

  <Option Name="AutomationTests" DefaultValue="Group:System" Description="Automation tests to run" />

  <Agent Name="Build Agent" Type="Win64">

    <Node Name="GenerateProjectFiles">
      <Log Message="Generating project files for $(ProjectName)..." />
      <Spawn Exe="$(RootDir)\Engine\Binaries\DotNET\UnrealBuildTool\UnrealBuildTool.exe" 
             Arguments="-ProjectFiles -Project=&quot;$(ProjectFile)&quot; -Game" />
      <Log Message="Project files generated successfully!" />
    </Node>

    <!-- Build Editor (only your project code, not the engine) -->
    <Node Name="BuildEditor" Requires="GenerateProjectFiles" Produces="#EditorBinaries" If="$(EnableEditor)">
      <Log Message="Building $(ProjectName) Editor (project code only)..." />
      <Compile Target="$(ProjectName)Editor" 
               Platform="Win64"
               Configuration="$(BuildConfiguration)"
               Arguments="-ProjectOnly -NoEngineChanges -NoHotReloadFromIDE"
               Project="$(ProjectFile)"
               Tag="#EditorBinaries" />
      <Log Message="Editor build complete" />
    </Node>

    <!-- Build Game Target (only your project code, not the engine) -->
    <Node Name="BuildGame" Requires="GenerateProjectFiles" Produces="#GameBinaries" If="$(EnableGameBuild)">
      <Log Message="Building $(ProjectName) game target (project code only)..." />
      <Compile Target="$(ProjectName)" 
               Platform="$(TargetPlatform)"
               Configuration="$(BuildConfiguration)" 
               Arguments="-ProjectOnly -NoEngineChanges -NoHotReloadFromIDE"
               Project="$(ProjectFile)"
               Tag="#GameBinaries" />
      <Log Message="Game build complete" />
    </Node>

    <!-- Cook Content -->
    <Node Name="CookContent" Requires="BuildEditor" Produces="#CookedContent" If="$(EnableCook)">
      <Log Message="Cooking content for $(TargetPlatform)..." />
      <Property Name="CookPlatform" Value="$(TargetPlatform)" />
      <Property Name="CookPlatform" Value="Windows" If="'$(TargetPlatform)' == 'Win64'" />
      <Cook Project="$(ProjectFile)" Platform="$(CookPlatform)" />
      <Tag Files="$(ProjectRoot)\Saved\Cooked\..." With="#CookedContent" />
    </Node>

    <!-- Stage Project -->
    <Node Name="StageProject" Requires="BuildGame;CookContent" If="$(EnablePackage)">
      <Log Message="Staging project for $(TargetPlatform)..." />
      <Command Name="BuildCookRun" Arguments="-Project=&quot;$(ProjectFile)&quot; -Platform=$(TargetPlatform) -Configuration=$(BuildConfiguration) -SkipBuild -SkipCook -Stage -Pak -NoCodeSign" />
    </Node>

    <!-- Package Project -->
    <Node Name="PackageProject" Requires="StageProject" If="$(EnablePackage)">
      <Log Message="Packaging project for $(TargetPlatform)..." />
      <Command Name="BuildCookRun" Arguments="-Project=&quot;$(ProjectFile)&quot; -Platform=$(TargetPlatform) -Configuration=$(BuildConfiguration) -SkipBuild -SkipCook -SkipStage -SkipPak -Package -NoCodeSign" />
    </Node>

  </Agent>

  <Agent Name="Test Agent" Type="Win64">

    <Node Name="RunAutomationTests" Requires="BuildEditor" If="$(EnableTests)" Produces="#AutomationReports">
      <Log Message="Running automation tests: $(AutomationTests)" />
      <Spawn Exe="$(RootDir)\Engine\Binaries\Win64\UnrealEditor-Cmd.exe"
            Arguments="&quot;$(ProjectFile)&quot; -Unattended -NullRHI -NoSound
            -ReportExportPath=&quot;$(AutomationOutDir)&quot;
            -abslog=&quot;$(AutomationOutDir)\Automation.log&quot;
            -TestExit=&quot;Automation Test Queue Empty&quot;
            -ExecCmds=&quot;Automation RunTest $(AutomationTests); Quit&quot;
            -LogCmds=&quot;LogAutomationController Verbose&quot;" />
      <Tag Files="$(AutomationOutDir)\..." With="#AutomationReports" />
      <Log Message="Automation tests complete" />
    </Node>

    <Node Name="TestBlueprintCompilation" Requires="BuildEditor" If="$(EnableTests)">
      <Log Message="Testing Blueprint compilation..." />
      <Commandlet Name="CompileAllBlueprints" Project="$(ProjectFile)" />
      <Log Message="Blueprint compilation test complete!" />
    </Node>
  </Agent>

  <Agent Name="Analysis Agent" Type="Win64">
    <Node Name="RunCodeAnalysis" Requires="GenerateProjectFiles">
      <Log Message="Running static code analysis (project modules only)..." />
      <Compile Target="$(ProjectName)Editor"
              Platform="Win64"
              Configuration="$(BuildConfiguration)"
              Project="$(ProjectFile)"
              Arguments="-StaticAnalyzer=Default -NoPCH -NoSharedPCH -DisableUnity -NoLink -ProjectOnly -NoEngineChanges -NoHotReloadFromIDE -Module=$(ProjectName)" />
      <Log Message="Static code analysis complete!" />
    </Node>

    <Node Name="ValidateAssets" Requires="BuildEditor">
      <Log Message="Validating project assets..." />
      <Command Name="DataValidation" Arguments="-Project=&quot;$(ProjectFile)&quot; -Unattended" />
      <Log Message="Asset validation complete!" />
    </Node>
  </Agent>

  <!-- Define what runs for each target -->
  <Property Name="BuildNodes" Value="GenerateProjectFiles" />
  <Property Name="BuildNodes" Value="$(BuildNodes);BuildEditor" If="$(EnableEditor)" />
  <Property Name="BuildNodes" Value="$(BuildNodes);BuildGame" If="$(EnableGameBuild)" />
  
  <Property Name="PackageNodes" Value="$(BuildNodes)" />
  <Property Name="PackageNodes" Value="$(PackageNodes);CookContent" If="$(EnableCook)" />
  <Property Name="PackageNodes" Value="$(PackageNodes);StageProject;PackageProject" If="$(EnablePackage)" />
  
  <Property Name="TestNodes" Value="" />
  <Property Name="TestNodes" Value="RunAutomationTests;TestBlueprintCompilation" If="$(EnableTests)" />

  <Property Name="AnalysisNodes" Value="" />
  <Property Name="AnalysisNodes" Value="RunCodeAnalysis;ValidateAssets" />

  <!-- Target definitions -->
  <Aggregate Name="Build" Requires="$(BuildNodes)" />
  <Aggregate Name="Package" Requires="$(PackageNodes)" />
  <Aggregate Name="Test" Requires="$(TestNodes)" If="'$(TestNodes)' != ''" />
  <Aggregate Name="Analyze" Requires="$(AnalysisNodes)" If="'$(AnalysisNodes)' != ''" />
  
  <!-- Full CI target combines everything -->
  <Property Name="CINodes" Value="$(PackageNodes)" />
  <Property Name="CINodes" Value="$(CINodes);$(TestNodes)" If="$(EnableTests) And '$(TestNodes)' != ''" />
  <Property Name="CINodes" Value="$(CINodes);$(AnalysisNodes)" If="'$(AnalysisNodes)' != ''" />
  
  <Aggregate Name="CI" Requires="$(CINodes)" />
  <Aggregate Name="Default" Requires="CI" />
</BuildGraph>