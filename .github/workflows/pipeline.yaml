name: UnrealPipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      build_configuration:
        description: 'Build Configuration'
        required: true
        default: 'Development'
        type: choice
        options: [Development, Shipping, Debug, Test]
      target_platform:
        description: 'Target Platform'
        required: true
        default: 'Win64'
        type: choice
        options: [Win64, Linux]
      enable_tests:
        description: 'Run Tests'
        required: true
        default: true
        type: boolean
      enable_packaging:
        description: 'Package Build'
        required: true
        default: true
        type: boolean
      build_script_path:
        description: 'Override path to Build.xml (optional)'
        required: false
        default: ''
        type: string

env:
  PROJECT_NAME: FPSProject
  UE_VERSION: "5.5"
  UE_ENGINE_PATH: "F:\\UE5.5-Installed"
  BUILD_CONFIGURATION: ${{ github.event.inputs.build_configuration || 'Development' }}
  TARGET_PLATFORM: ${{ github.event.inputs.target_platform || 'Win64' }}

jobs:
  build-and-test:
    name: Build, Cook, Package & Test
    runs-on: [self-hosted, windows]
    timeout-minutes: 120

    steps:
      # Checkout
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      # Verify precompiled engine
      - name: Verify Precompiled Engine
        shell: powershell
        run: |
          $UEPath = $env:UE_ENGINE_PATH
          if (!(Test-Path $UEPath)) { Write-Error "Engine not found: $UEPath"; exit 1 }
          if (!(Test-Path "$UEPath\Engine\Build\BatchFiles\RunUAT.bat")) { Write-Error "RunUAT missing"; exit 1 }
          if (!(Test-Path "$UEPath\Engine\Binaries\Win64\UnrealEditor.exe")) { Write-Error "UnrealEditor.exe missing"; exit 1 }
          if (!(Test-Path "$UEPath\Engine\Binaries\DotNET\UnrealBuildTool\UnrealBuildTool.exe")) { Write-Error "UnrealBuildTool.exe missing"; exit 1 }

      # Clean Saved and intermediates
      - name: Clean previous build outputs
        shell: powershell
        run: |
          foreach ($d in "Binaries","Intermediate","Saved/StagedBuilds","Saved/Cooked","Saved/Automation","Saved/Logs") {
            if (Test-Path $d) { Remove-Item -Recurse -Force $d -ErrorAction SilentlyContinue }
          }

      # Run BuildGraph (CI)
      - name: Run BuildGraph CI Pipeline
        shell: powershell
        run: |
          $UEPath = $env:UE_ENGINE_PATH
          $RunUAT = Join-Path $UEPath 'Engine\Build\BatchFiles\RunUAT.bat'
          $RepoRoot = $PWD.Path
          if (!(Test-Path $RunUAT)) { Write-Error "RunUAT not found"; exit 1 }

          if (-not $env:PROJECT_ROOT -or -not (Test-Path $env:PROJECT_ROOT)) {
            $uproject = Get-ChildItem -Path $RepoRoot -Filter *.uproject -File -Recurse | Select-Object -First 1
            if (-not $uproject) { Write-Error "No .uproject found"; exit 1 }
            $ProjectRoot = Split-Path -Parent $uproject.FullName
          } else {
            $ProjectRoot = $env:PROJECT_ROOT
          }
          $ProjectName = [IO.Path]::GetFileNameWithoutExtension((Get-ChildItem $ProjectRoot -Filter *.uproject -File).FullName)

          $InputBuildScript = "${{ github.event.inputs.build_script_path }}"
          if ([string]::IsNullOrWhiteSpace($InputBuildScript)) { $BuildScript = Join-Path $ProjectRoot 'BuildScripts\Build.xml' } else { $BuildScript = (Split-Path -IsAbsolute $InputBuildScript) ? $InputBuildScript : (Join-Path $RepoRoot $InputBuildScript) }
          if (!(Test-Path $BuildScript)) { Write-Error "Build script not found: $BuildScript"; exit 1 }

          $args = @(
            "BuildGraph",
            "-Script=`"$BuildScript`"",
            "-Target=CI",
            "-set:ProjectName=$ProjectName",
            "-set:ProjectRoot=`"$ProjectRoot`"",
            "-set:BuildConfiguration=$env:BUILD_CONFIGURATION",
            "-set:TargetPlatform=$env:TARGET_PLATFORM",
            "-set:EnableTests=${{ github.event.inputs.enable_tests || 'true' }}",
            "-set:EnablePackage=${{ github.event.inputs.enable_packaging || 'true' }}",
            "-set:EnableLinting=true"
          )
          & $RunUAT @args
          if ($LASTEXITCODE -ne 0) {
            if (Test-Path "Saved\Logs") {
              Get-ChildItem "Saved\Logs" -Filter "*.log" | Sort-Object LastWriteTime -Descending | Select-Object -First 3 | ForEach-Object {
                Write-Host "=== $($_.Name) ==="; Get-Content $_.FullName -Tail 50
              }
            }
            exit $LASTEXITCODE
          }

      # Collect CI bundle
      - name: Collect CI bundle
        if: always()
        shell: powershell
        run: |
          $bundle = "ArtifactsBundle"
          if (Test-Path $bundle) { Remove-Item -Recurse -Force $bundle }
          New-Item -ItemType Directory -Path $bundle | Out-Null
          if (Test-Path ".\Saved\Automation\_Bundle") { robocopy ".\Saved\Automation\_Bundle" "$bundle" /E /NFL /NDL /NJH /NJS /NP | Out-Null }
          foreach ($m in @{From="Saved\Automation";To="$bundle\_Raw\Automation"}, @{From="Saved\Logs";To="$bundle\_Raw\Logs"}, @{From="Saved\StagedBuilds";To="$bundle\_Raw\StagedBuilds"}) {
            if (Test-Path $m.From) { New-Item -ItemType Directory -Path $m.To -Force | Out-Null; robocopy $m.From $m.To /E /NFL /NDL /NJH /NJS /NP | Out-Null }
          }
          Compress-Archive -Path "$bundle\*" -DestinationPath "ci-bundle.zip" -Force

      # Upload artifacts
      - name: Upload CI bundle (raw)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-bundle-${{ env.BUILD_CONFIGURATION }}-${{ env.TARGET_PLATFORM }}
          path: ArtifactsBundle/**/*
          retention-days: 14

      - name: Upload CI bundle (zip)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-bundle-zip-${{ env.BUILD_CONFIGURATION }}-${{ env.TARGET_PLATFORM }}
          path: ci-bundle.zip
          retention-days: 30

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ env.BUILD_CONFIGURATION }}-${{ env.TARGET_PLATFORM }}
          path: Saved/Logs/**/*
          retention-days: 7

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ env.BUILD_CONFIGURATION }}-${{ env.TARGET_PLATFORM }}
          path: Saved/Automation/**/*
          retention-days: 14

      - name: Upload Packaged Build
        if: success() && (github.event.inputs.enable_packaging == 'true' || github.event.inputs.enable_packaging == null)
        uses: actions/upload-artifact@v4
        with:
          name: packaged-build-${{ env.BUILD_CONFIGURATION }}-${{ env.TARGET_PLATFORM }}
          path: Saved/StagedBuilds/**/*
          retention-days: 30

      # Publish JUnit
      - name: Publish Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Unreal Automation Tests
          path: |
            Saved/Automation/**/*.xml
            ArtifactsBundle/**/*.xml
          reporter: java-junit
          fail-on-error: false

      # Summary (plain)
      - name: Generate workflow summary
        if: always()
        shell: powershell
        run: |
          $s = $env:GITHUB_STEP_SUMMARY
          "## CI Summary ($env:BUILD_CONFIGURATION / $env:TARGET_PLATFORM)" | Out-File $s -Encoding utf8
          $xmlCount = (Get-ChildItem -Path "Saved\Automation","ArtifactsBundle" -Recurse -Filter *.xml -ErrorAction SilentlyContinue | Measure-Object).Count
          "JUnit XML files: $xmlCount" | Out-File $s -Append
          $auto = Join-Path $PWD 'PerformanceTestResults_Automation.csv'
          if (Test-Path $auto) {
            "`n### PerformanceTestResults_Automation.csv (first 10 rows)" | Out-File $s -Append
            $rows = Import-Csv $auto
            if ($rows.Count -gt 0) {
              $cols = ($rows[0].PsObject.Properties.Name)
              "| " + ($cols -join " | ") + " |" | Out-File $s -Append
              "| " + (($cols | ForEach-Object { "---" }) -join " | ") + " |" | Out-File $s -Append
              $rows | Select-Object -First 10 | ForEach-Object { "| " + ($cols | ForEach-Object { "$($_.$_)" } -join " | ") + " |" | Out-File $s -Append }
            }
          }
          $arch = Join-Path $PWD 'ArchiveDirectory'
          if (Test-Path $arch) {
            $latest = Get-ChildItem $arch -Filter 'PerformanceTestResults_*.csv' | Sort-Object LastWriteTime -Descending | Select-Object -First 1
            if ($latest) {
              "`n### $($latest.Name) (first 10 rows)" | Out-File $s -Append
              $rows = Import-Csv $latest.FullName
              if ($rows.Count -gt 0) {
                $cols = ($rows[0].PsObject.Properties.Name)
                "| " + ($cols -join " | ") + " |" | Out-File $s -Append
                "| " + (($cols | ForEach-Object { "---" }) -join " | ") + " |" | Out-File $s -Append
                $rows | Select-Object -First 10 | ForEach-Object { "| " + ($cols | ForEach-Object { "$($_.$_)" } -join " | ") + " |" | Out-File $s -Append }
              }
            }
          }

      # Create Release
      - name: Create Release
        if: success() && github.ref == 'refs/heads/main' && (github.event.inputs.enable_packaging == 'true' || github.event.inputs.enable_packaging == null)
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: build-${{ github.run_number }}
          release_name: Build ${{ github.run_number }}
          body: |
            Automated build from commit ${{ github.sha }}

            Configuration: ${{ env.BUILD_CONFIGURATION }}
            Platform: ${{ env.TARGET_PLATFORM }}
          draft: false
          prerelease: ${{ env.BUILD_CONFIGURATION != 'Shipping' }}

      # Attach ZIP to Release
      - name: Attach CI bundle to Release
        if: success() && github.ref == 'refs/heads/main' && (github.event.inputs.enable_packaging == 'true' || github.event.inputs.enable_packaging == null)
        uses: softprops/action-gh-release@v2
        with:
          files: ci-bundle.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  static-analysis:
    name: Static Code Analysis
    runs-on: [self-hosted, windows]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Verify Precompiled Engine
        shell: powershell
        run: |
          $UEPath = $env:UE_ENGINE_PATH
          if (!(Test-Path "$UEPath\Engine\Build\BatchFiles\RunUAT.bat")) { Write-Error "Engine not found"; exit 1 }

      - name: Run BuildGraph Analysis Only
        shell: powershell
        run: |
          $UEPath = $env:UE_ENGINE_PATH
          $RunUATPath = "$UEPath\Engine\Build\BatchFiles\RunUAT.bat"
          $ProjectRoot = $PWD.Path
          & $RunUATPath BuildGraph `
            -Script="$ProjectRoot\BuildScripts\Build.xml" `
            -Target=Analyze `
            -set:ProjectName=$env:PROJECT_NAME `
            -set:ProjectRoot="$ProjectRoot" `
            -set:BuildConfiguration=$env:BUILD_CONFIGURATION `
            -set:EnableLinting=true

      - name: Upload Analysis Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-results
          path: Saved/Logs/**/*StaticAnalysis*
          retention-days: 7
