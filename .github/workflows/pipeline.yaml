name: UnrealPipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      build_configuration:
        description: 'Build Configuration'
        required: true
        default: 'Development'
        type: choice
        options:
        - Development
        - Shipping
        - Debug
        - Test
      target_platform:
        description: 'Target Platform'
        required: true
        default: 'Win64'
        type: choice
        options:
        - Win64
        - Linux
      enable_tests:
        description: 'Run Tests'
        required: true
        default: true
        type: boolean
      enable_packaging:
        description: 'Package Build'
        required: true
        default: true
        type: boolean

env:
  PROJECT_NAME: FPSProject
  UE_VERSION: "5.5"
  UE_ENGINE_PATH: "F:\\UE5.5-Installed"
  BUILD_CONFIGURATION: ${{ github.event.inputs.build_configuration || 'Development' }}
  TARGET_PLATFORM: ${{ github.event.inputs.target_platform || 'Win64' }}

jobs:
  build-and-test:
    name: Build, Cook, Package & Test
    runs-on: [self-hosted, windows]
    
    timeout-minutes: 120
    
    steps:
      # Checkout with LFS
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      
      # Verify precompiled engine exists
      - name: Verify Precompiled Engine
        run: |
          Write-Host "Checking for precompiled Unreal Engine..."
          
          $UEPath = $env:UE_ENGINE_PATH
          $RunUATPath = "$UEPath\Engine\Build\BatchFiles\RunUAT.bat"
          $EditorPath = "$UEPath\Engine\Binaries\Win64\UnrealEditor.exe"
          $UBTPath = "$UEPath\Engine\Binaries\DotNET\UnrealBuildTool\UnrealBuildTool.exe"
          
          Write-Host "UE Engine Path: $UEPath"
          
          if (!(Test-Path $UEPath)) {
            Write-Error "Precompiled engine not found at: $UEPath"
            Write-Host "Available directories in D:\:"
            Get-ChildItem -Path "D:\" -Directory | ForEach-Object { Write-Host "  - $($_.Name)" }
            exit 1
          }
          
          if (!(Test-Path $RunUATPath)) {
            Write-Error "RunUAT.bat not found at: $RunUATPath"
            exit 1
          }
          
          if (!(Test-Path $EditorPath)) {
            Write-Error "UnrealEditor.exe not found at: $EditorPath"
            exit 1
          }
          
          if (!(Test-Path $UBTPath)) {
            Write-Error "UnrealBuildTool.exe not found at: $UBTPath"
            exit 1
          }
          
          Write-Host "Precompiled engine verified successfully!"
          Write-Host "This will use your precompiled engine, NOT compile the engine from scratch"
        shell: powershell
  
      # Workspace Prep & Clean
      - name: Clean previous build outputs
        run: |
          Write-Host "Cleaning previous build outputs..."
          
          # Clean common build directories
          $DirsToClean = @(
            "Binaries", 
            "Intermediate", 
            "Saved/StagedBuilds", 
            "Saved/Cooked",
            "Saved/Automation",
            "Saved/Logs"
          )
          
          foreach ($Dir in $DirsToClean) {
            if (Test-Path $Dir) {
              Write-Host "Removing $Dir"
              Remove-Item -Recurse -Force $Dir -ErrorAction SilentlyContinue
            }
          }
          
          Write-Host "Workspace cleaned!"
        shell: powershell
    
      # Run BuildGraph
      - name: Run BuildGraph CI Pipeline
        run: |
          Write-Host "Starting BuildGraph CI/CD Pipeline..."
          Write-Host "Using PRECOMPILED engine from: $env:UE_ENGINE_PATH"

          $UEPath = $env:UE_ENGINE_PATH
          
          $RunUATPath = "$UEPath\Engine\Build\BatchFiles\RunUAT.bat"
          $ProjectRoot = $PWD.Path
          $BuildScript = "$ProjectRoot\BuildScripts\Build.xml"
          
          Write-Host "UE Path: $UEPath"
          Write-Host "Project Root: $ProjectRoot"
          Write-Host "Build Script: $BuildScript"

          if (!(Test-Path $BuildScript)) {
            Write-Error "Build script not found at: $BuildScript"
            Write-Host "Creating BuildScripts directory and checking project structure..."
            
            if (!(Test-Path "$ProjectRoot\BuildScripts")) {
              New-Item -ItemType Directory -Path "$ProjectRoot\BuildScripts" -Force
            }
            
            Write-Host "Project files in root:"
            Get-ChildItem -Path $ProjectRoot -Filter "*.*" | Select-Object Name, LastWriteTime | ForEach-Object { Write-Host "  $($_.Name)" }
            exit 1
          }
          
          # Build the BuildGraph command - uses your precompiled engine
          $BuildGraphArgs = @(
            "BuildGraph"
            "-Script=`"$BuildScript`""
            "-Target=CI"  # Run the CI pipeline (build + test + analyze + package)
            "-set:ProjectName=$env:PROJECT_NAME"
            "-set:ProjectRoot=`"$ProjectRoot`""
            "-set:BuildConfiguration=$env:BUILD_CONFIGURATION"
            "-set:TargetPlatform=$env:TARGET_PLATFORM"
            "-set:EnableTests=${{ github.event.inputs.enable_tests || 'true' }}"
            "-set:EnablePackage=${{ github.event.inputs.enable_packaging || 'true' }}"
            "-set:EnableLinting=true"
          )
          
          if ("${{ github.event_name }}" -eq "pull_request") {
            $BuildGraphArgs += "-set:AutomationTests=Group:System;Group:Smoke"
          } elseif ("${{ github.ref }}" -eq "refs/heads/main") {
            $BuildGraphArgs += "-set:AutomationTests=Group:System;Group:Smoke;Group:Performance"
          }
          
          # Execute BuildGraph
          Write-Host "Executing: $RunUATPath $($BuildGraphArgs -join ' ')"
          Write-Host "This will compile your PROJECT code only, using the precompiled engine!"
          
          & $RunUATPath @BuildGraphArgs
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "BuildGraph failed with exit code $LASTEXITCODE"

            if (Test-Path "Saved\Logs") {
              Write-Host "Recent log files:"
              Get-ChildItem "Saved\Logs" -Filter "*.log" | Sort-Object LastWriteTime -Descending | Select-Object -First 3 | ForEach-Object {
                Write-Host "=== $($_.Name) ==="
                Get-Content $_.FullName -Tail 50
              }
            }

            exit $LASTEXITCODE
          }
          
          Write-Host "BuildGraph pipeline completed successfully!"
        shell: powershell
      
      # Upload Artifacts
      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ env.BUILD_CONFIGURATION }}-${{ env.TARGET_PLATFORM }}
          path: |
            Saved/Logs/**/*
          retention-days: 7
      
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ env.BUILD_CONFIGURATION }}-${{ env.TARGET_PLATFORM }}
          path: |
            Saved/Automation/**/*
          retention-days: 14
      
      - name: Upload Packaged Build
        if: success() && (github.event.inputs.enable_packaging == 'true' || github.event.inputs.enable_packaging == null)
        uses: actions/upload-artifact@v4
        with:
          name: packaged-build-${{ env.BUILD_CONFIGURATION }}-${{ env.TARGET_PLATFORM }}
          path: |
            Saved/StagedBuilds/**/*
          retention-days: 30
      
      # Publish Test Results
      - name: Publish Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Unreal Automation Tests
          path: 'Saved/Automation/**/*.xml'
          reporter: java-junit
          fail-on-error: false
      
      # Create Release
      - name: Create Release
        if: success() && github.ref == 'refs/heads/main' && (github.event.inputs.enable_packaging == 'true' || github.event.inputs.enable_packaging == null)
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: build-${{ github.run_number }}
          release_name: Build ${{ github.run_number }}
          body: |
            Automated build from commit ${{ github.sha }}
            
            **Configuration:** ${{ env.BUILD_CONFIGURATION }}
            **Platform:** ${{ env.TARGET_PLATFORM }}
            
            Download the packaged build from the artifacts above.
          draft: false
          prerelease: ${{ env.BUILD_CONFIGURATION != 'Shipping' }}

  # Parallel static analysis job
  static-analysis:
    name: Static Code Analysis
    runs-on: [self-hosted, windows]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true
    
    - name: Verify Precompiled Engine
      run: |
        $UEPath = $env:UE_ENGINE_PATH
        if (!(Test-Path "$UEPath\Engine\Build\BatchFiles\RunUAT.bat")) {
          Write-Error "Precompiled engine not found at: $UEPath"
          exit 1
        }
        Write-Host "Using precompiled engine for analysis"
      shell: powershell
    
    - name: Run BuildGraph Analysis Only
      run: |
        $UEPath = $env:UE_ENGINE_PATH
        $RunUATPath = "$UEPath\Engine\Build\BatchFiles\RunUAT.bat"
        $ProjectRoot = $PWD.Path
        
        & $RunUATPath BuildGraph `
          -Script="$ProjectRoot\BuildScripts\Build.xml" `
          -Target=Analyze `
          -set:ProjectName=$env:PROJECT_NAME `
          -set:ProjectRoot="$ProjectRoot" `
          -set:BuildConfiguration=$env:BUILD_CONFIGURATION `
          -set:EnableLinting=true
      shell: powershell
    
    - name: Upload Analysis Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: static-analysis-results
        path: |
          Saved/Logs/**/*StaticAnalysis*
        retention-days: 7
